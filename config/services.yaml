# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration

imports:
  - { resource: version.yaml }

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    LightSaml\SpBundle\Security\User\UsernameMapperInterface:
      alias: lightsaml_sp.username_mapper.simple

    LightSaml\Store\Id\IdStoreInterface:
      class: SchulIT\CommonBundle\Store\IdStore

    SchulIT\CommonBundle\Command\CreateCertificateCommand:
        arguments:
            $types:
              saml:
                  keyFile: '%sp_cert_key%'
                  certFile: '%sp_cert_file%'

    # Controller
    App\Controller\MarkdownController:
      arguments:
        $baseUrl: '%env(APP_URL)%'
        $filesystem: '@oneup_flysystem.uploads_filesystem'

    EasySlugger\SluggerInterface:
      class: EasySlugger\Utf8Slugger

    # Notifications
    App\Notification\EmailNotificationListener:
      arguments:
        $sender: "%env(MAILER_FROM)%"
        $appName: "%env(APP_NAME)%"

    # Menu
    App\Menu\Builder:
      tags:
        - { name: knp_menu.menu_builder, method: mainMenu, alias: mainMenu }

    App\Menu\ServicesMenuBuilder:
      tags:
        - { name: knp_menu.menu_builder, method: servicesMenu, alias: servicesMenu }

    App\Menu\UserMenuBuilder:
      arguments:
        $idpProfileUrl: '%env(IDP_PROFILE_URL)%'
      tags:
        - { name: knp_menu.menu_builder, method: userMenu, alias: userMenu }

    App\Menu\AdminMenuBuilder:
      tags:
        - { name: knp_menu.menu_builder, method: adminMenu, alias: adminMenu }

    SchulIT\CommonBundle\Menu\Voter:
      tags:
        - { name: knp_menu.voter }

    # Session storage
    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
      arguments:
        $pdoOrDsn: '%env(DATABASE_URL)%'

    SchulIT\CommonBundle\EventSubscriber\SamlExceptionSubscriber:
      arguments:
        $retryRoute: 'dashboard'
        $loggedInRoute: 'dashboard'

    # DARK MODE:
    SchulIT\CommonBundle\DarkMode\DarkModeManagerInterface:
      class: App\DarkMode\DarkModeManager

    # Security
    App\Security\CronUserProvider:
      arguments:
        $username: 'cron'
        $password: '%env(CRON_PASSWORD)%'

    App\Command\CleanupImagesCommand:
      arguments:
        $uploadsFilesystem: '@oneup_flysystem.uploads_filesystem'

    # MONOLOG
    SchulIT\CommonBundle\Monolog\DatabaseHandler:
      arguments:
        $connection: '@doctrine.dbal.logger_connection'
      calls:
        - setFormatter: [ '@SchulIT\CommonBundle\Monolog\LineFormatter' ]

    SchulIT\CommonBundle\Monolog\UsernameProcessor:
      tags:
        - { name: monolog.processor }
    SchulIT\CommonBundle\Monolog\LineFormatter: ~
    SchulIT\CommonBundle\Monolog\RequestProcessor:
      tags:
        - { name: monolog.processor }

    # MISC
    App\EventListener\LoadMessengerCronJobs:
      arguments:
        $useCronjobForMessenger: "%env(bool:MESSENGER_CRONJOB)%"
        $command: '@console.command.messenger_consume_messages'

    App\EventListener\WorkerRunningSubscriber:
      arguments:
        $useCronjobForMessenger: "%env(bool:MESSENGER_CRONJOB)%"

    Zenstruck\Messenger\Monitor\Command\PurgeCommand:
      tags:
        - { name: shapecode_cron.cron_job, expression: '@daily' }